---
services:
  flask-api:
    image: flask_api
    container_name: flask-api
    hostname: flask_api
    profiles:
      - api
    depends_on:
      minio:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
      kafka-broker:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 4G
    ports:
      - 5000:5000
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    volumes:
      - ${PROJECT_DIR:-${PWD}}/src/flask_api:/flask_api

  minio:
    image: quay.io/minio/minio:latest
    container_name: minio
    hostname: minio
    profiles:
      - minio
    environment:
      MINIO_ROOT_USER: user
      MINIO_ROOT_PASSWORD: password
      # MINIO_CONFIG_ENV_FILE: /etc/config.env
      # MINIO_SERVER_URL: https://minio.example.net:9000
      # MINIO_BROWSER_REDIRECT_URL: https://example.net/minio/ui
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: mc ready local
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ${PROJECT_DIR:-${PWD}}/src/docker/minio/data:/data
    command: server /data --console-address :9001
    restart: always

  # KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: Defines key/value pairs for the security protocol to use, per listener name
  # KAFKA_INTER_BROKER_LISTENER_NAME: Defines which listener to use for inter-broker communication. Kafka brokers communicate between themselves, usually on the internal network
  kafka-broker:
    image: bitnami/kafka:3.4
    container_name: kafka-broker
    hostname: kafka-broker
    profiles:
      - kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ENABLE_KRAFT: yes
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: PLAINTEXT://:19092,CONTROLLER://:9093, EXTERNAL://:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT, EXTERNAL:PLAINTEXT
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:19092, EXTERNAL://localhost:9092
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka-broker:9093
      ALLOW_PLAINTEXT_LISTENER: yes
    healthcheck:
      # NOTE: bitnami image don't have netcat installed
      test: kafka-topics.sh --list --bootstrap-server localhost:9092 || exit 1
      interval: 1s
      timeout: 5s
      retries: 3
    restart: always 

  schema-registry:
    image: confluentinc/cp-schema-registry:7.6.1
    container_name: schema-registry
    hostname: schema-registry
    profiles:
      - kafka
    ports:
      - "8081:8081"
    depends_on:
      kafka-broker:
        condition: service_healthy
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka-broker:19092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      # SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    healthcheck:
      test: [ "CMD", "curl", "--output", "/dev/null", "--silent", "--head", "--fail", "http://schema-registry:8081/subjects" ]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: always

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    profiles:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: PLAINTEXT://kafka-broker:19092,PLAINTEXT_HOST://kafka-broker:19092
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
      DYNAMIC_CONFIG_ENABLED: 'true'
    ports:
      - 8889:8080  # host: image
    depends_on:
      kafka-broker:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
      # kafka-connect:
      #   condition: service_completed_successfully
    restart: always
